@model IEnumerable<iLabPlus.Models.BDiLabPlus.Divisas>

@{
    ViewBag.Title = "Divisas";


    var actions = ViewBag.Actions;

}

<script src="~/js/gridsFunctions.js"></script>

<script id="template1" type="text/template">
    <div class="dropdown">
        <button class="dropdown-toggle" type="button" id="dropdownMenu2" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
            <i class="glyphicon glyphicon-option-vertical"></i>
        </button>
        <div class="dropdown-menu" id="dropdownMenuItems" aria-labelledby="dropdownMenu2">
            <button class="dropdown-item" type="button">Editar</button>
            <button class="dropdown-item" type="button">Eliminar</button>
            <button class="dropdown-item" type="button">Imprimir</button>
        </div>
    </div>
</script>




<div class="row wrapper page-heading border-bottom white-bg ">
    <div class="col-3" style="padding-left:0;">
        <h3>Divisas</h3>
    </div>

    <div class="col-9 page_heading_func">

        <button id="BtnDivisaNew" type="button" class="btn btn-default" onclick="BtnDialogDivisaNew()"><i class="far fa-fw fa-plus"></i></button>

        <p id="gridSearch" style="width:300px;"><span class="glyphicon glyphicon-search" aria-hidden="true"></span></p>



        <div class="btn-group ">
            <button type="button" class="btn btn-default  dropdown-toggle " data-bs-toggle="dropdown">
                <i class="far fa-fw fa-ellipsis-v"></i>
            </button>
            <ul class="dropdown-menu dropdown-menu-right ">

                <li><a data-action="import" data-key="clientes"><i class="fal fa-fw fa-cloud-upload"></i> &nbsp;&nbsp;&nbsp;Importar Divisas</a></li>
                <li role="separator" class="divider"></li>
                <li><a class="btnexportst" data-output="excel" data-esort="0-stringasc"><i class="fal fa-fw fa-share-square"></i> &nbsp;&nbsp;&nbsp;Exportar Excel</a></li>
                <li><a class="btnexportst" data-output="pdf" data-esort="0-stringasc"><i class="fal fa-fw fa-file-pdf"></i> &nbsp;&nbsp;&nbsp;Exportar PDF</a></li>
                <li><hr class="dropdown-divider"></li>
                <li><a class="btnexportst" data-output="pdf" data-esort="0-stringasc" onclick="ResetearConfigGrid()"><i class="fal fa-fw fa-sd-card"></i> &nbsp;&nbsp;&nbsp;Reiniciar configuración grid</a></li>
            </ul>
        </div>

    </div>

</div>

<div class="row wrapper wrapper-content  ">
    <div class="ibox-content">

        @(Html.C1().FlexGrid()
                        .Id("gridDivisas")
                        //.AutoGenerateColumns(true)
                        .AlternatingRowStep(0)
                        .AllowDragging(C1.Web.Mvc.Grid.AllowDragging.Columns)
                        .AllowPinning(true)
                        .AutoSizeMode(AutoSizeMode.Both)
                        .AutoScroll(false)
                        .AutoSearch(true)
                        .CssClass("flexgrid GridEvents truncate")
                        .DefaultRowSize(27)
                        .Filterable(f => {
                            f.DefaultFilterType(FilterType.Both);
                            f.Id("theGridFilter");
                        })
                        .HeadersVisibility(HeadersVisibility.Column)
                        //.IsDisabled(true)
                        .IsReadOnly(true)
                        .SelectionMode(C1.Web.Mvc.Grid.SelectionMode.Row)
                        //.ShowColumnFooters(true)
                        .SortingType(C1.Web.Mvc.Grid.AllowSorting.SingleColumn)
                        .Bind(Model)
                        .AutoGenerateColumns(false)
                        //.FrozenColumns(2)
                        .OrderBy("Divisa")
                        .FrozenColumns((int)@ViewBag.ColumnsPinnedUser)
                        .ColumnLayout((string)@ViewBag.ColumnsLayoutUser)
                        .Columns(col =>
                        {
                            col.Add(c => c.Binding("Guid").Header("Guid").Width("100").Visible(false));

                            col.Add(c => c.Binding("Divisa").Header("Divisa").Width("120"));
                            col.Add(c => c.Binding("DivSimbolo").Header("Símbolo").Width("120"));
                            col.Add(c => c.Binding("DivFecha").Header("Fecha").Width("130"));

                            col.Add(c => c.Binding("DivCambio").Header("Cambio").Width("150").Align("right").Format("n5"));
                            col.Add(c => c.Binding("DivNombre").Header("Descripción").Width("350"));

                            col.Add(c => c.Binding("IsoUser").Header("IsoUser").Width("130*"));
                            col.Add(c => c.Binding("IsoFecAlt").Header("Iso Fecha Alta").Width("200*").Format("dd-MM-yyyy HH:mm:ss"));
                            col.Add(c => c.Binding("IsoFecMod").Header("Iso fecha Mod.").Width("200*").Format("dd-MM-yyyy HH:mm:ss"));

                        })
                        )

        @(Html.C1().FlexGridSearch("#gridSearch")
                            .Grid("gridDivisas")
                            .Delay(50)
                            .CssMatch("underline-match")
                            .Placeholder(string.Format("{0}", Html.Raw("Buscar...")))
                            )

    </div>
</div>



<script>

    let gridConfig

    $(document).ready(function () {

        var searchFields = ['Divisa', 'DivNombre'];
        gridConfig = initializeGrid("gridDivisas", "gridSearch", searchFields);

        // Asignar la función de filtrado específica para Divisas
        gridConfig.search.hostElement.addEventListener("input", function (e) {
            if (gridConfig.search.text != "") {
                applyFilters(gridConfig.grid, gridConfig.search, searchFields);
                SetCookiesView();
            }
        }, true);

        CargaDatos(gridConfig.grid);
        setupColumnResizeIndicator(gridConfig.grid);

    });

    function BtnDialogDivisaNew() {
        N_DialogDivisa("New").then((res) => {
            formatearFechas(res);
            N_Grid_Data_Add(gridConfig.grid, res);
            setupTooltips(gridConfig.grid);
        }).catch((error) => {
            console.error("Error al crear nueva divisa:", error);
        });
    }


    function formatearFechas(res) {
        if (res.IsoFecAlt) {
            let isoFecAlt = new Date(res.IsoFecAlt);
            res.IsoFecAlt = isoFecAlt.toLocaleDateString('es-ES', { year: 'numeric', month: '2-digit', day: '2-digit' }).replace(/\//g, '-') + " " + isoFecAlt.toLocaleTimeString();
        }

        if (res.IsoFecMod) {
            let isoFecMod = new Date(res.IsoFecMod);
            res.IsoFecMod = isoFecMod.toLocaleDateString('es-ES', { year: 'numeric', month: '2-digit', day: '2-digit' }).replace(/\//g, '-') + " " + isoFecMod.toLocaleTimeString();
        }

        if (res.DivFecha) {
            let divFecha = new Date(res.DivFecha);
            res.DivFecha = divFecha.toLocaleDateString('es-ES', { year: 'numeric', month: '2-digit', day: '2-digit' }).replace(/\//g, '/');
        }
    }

    function ResetearConfigGrid() {

        BtnResetConfigGrid(gridConfig.grid);
        setupTooltips(gridConfig.grid);

    }
   

</script>
